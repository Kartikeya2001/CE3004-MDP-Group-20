import serial
import os
from time import sleep
from ImageRecognitionConnection import *
import signal
import sys
import time
import cv2 as cv

#for Debugging
sys.settrace

#Connecting to Android and STM32 (port variable)
port = serial.Serial("/dev/ttyUSB0",baudrate=115200,timeout=0.1)
Android = serial.Serial("/dev/rfcomm0",baudrate=115200,timeout=0.1)

allObCount = []
allX= []
allY = []
allDir = []
index = 0
label = "placeholder"
RobotPlaced = False

#Resetting Image Label on Android (For testing purpose)
'''Android.write(bytes(str("TARGET,"+str(1)+","+str(1)),'utf-8'))
Android.write(bytes(str("TARGET,"+str(2)+","+str(2)),'utf-8'))
Android.write(bytes(str("TARGET,"+str(3)+","+str(3)),'utf-8'))
Android.write(bytes(str("TARGET,"+str(4)+","+str(4)),'utf-8'))
Android.write(bytes(str("TARGET,"+str(5)+","+str(5)),'utf-8'))'''

while True:
    
    #Reading Data from android and stm
    AndroidPort = Android.read(99)
    AndroidMsg = str(AndroidPort)
    RobotPort = port.read(99)
    RobotMsg =str(RobotPort)

    #Check which button is pressed and perform correct actions

    #For Manual control        
    if len(AndroidMsg)==4 and not("begin" in AndroidMsg and RobotPlaced):
        #Perform Action if message from Android is not 's'
        if str(AndroidMsg) != "b's'":
            port.write(AndroidPort)
        else:
	    #If meessage is 's' Run Image Regconition File
            templabel = main()
            label = main()
            
	    #For testing purpose without image regconition
            '''sleep(1)
            label = "20"'''

	    #Write label to Android tablet         
            Android.write(bytes(str(label),'utf-8')) 
        
    #For Automatic movement/ Algorithm's best path
    if len(AndroidMsg) > 4:
	#Ensure that robot is placed in the android app
        if "Coordinates" in AndroidMsg:
            RobotPlaced = True
        
	#Get Obstacle Position from Android Application
        if "Obstacle" in AndroidMsg and not("Removed" in AndroidMsg):
            MsgSplited = AndroidMsg.split(":")
            ObCount = str(MsgSplited[0][-1])
            Coordinate = MsgSplited[1].split(",")
            if len(Coordinate) == 3:
                x = str(Coordinate[0]).replace("(","")
                y2 = str(Coordinate[1]).replace(")","")
                y = str(y2).replace("'","")
                direction = str(Coordinate[2]).replace("'","")
                allObCount.append(ObCount.strip())               
                allX.append(x.strip())
                allY.append(y.strip())

		#Printing out for debugging purpose
		print("Obj No.: "+ ObCount)
		print("X Co-ordinates: "+ x)
                print("Y Co-ordinates: "+y)

		#Converting Direction from Android to Numbers to fit algorithm's input file
                if direction.strip() == "N":
                    allDir.append("1")
                    print("Direction: "+direction + ", Num: 1")
                    Android.write(bytes("Successfully placed",'utf-8'))
                elif direction.strip() == "E":
                    allDir.append("2")
                    print("Direction: "+direction + ", Num: 2")
                    Android.write(bytes("Successfully placed",'utf-8'))
                elif direction.strip() == "S":
                    allDir.append("3")
                    print("Direction: "+direction + ", Num: 3")
                    Android.write(bytes("Successfully placed",'utf-8'))
                elif direction.strip() == "W":
                    allDir.append("4")
                    print("Direction: "+direction + ", Num: 4")
                    Android.write(bytes("Successfully placed",'utf-8'))
        
	#Feeding Algorithm with input file            
        if "beginExplore" in AndroidMsg and RobotPlaced:
	    #Write an input file for algorithm to take in obstacle position
            inputfile = open("/home/pi/Desktop/MDP-Group-20-master/Algorithms/input.txt","w+")
            inputfile.write(str(len(allObCount))+"\n")
            for x in allX:
                if index != len(allX)-1:
                    inputfile.write(allX[index] + " " + allY[index] + " " +allDir[index]+"\n")
                else:
                    inputfile.write(allX[index] + " " + allY[index] + " " +allDir[index])
                index+=1
            inputfile.close()
	    #Printing for debugging purpose
            print("finished writing input, " + str(len(allObCount))+" Objects")
            index = 0
	    #use os library to change the current directory
            os.chdir("/home/pi/Desktop/MDP-Group-20-master/Algorithms")

            print("Executing Algo")
	    #using os library to execute the algorithm's C program to calculate best path
            os.system('./algoOnly <input.txt> output.txt')
            print("Bestpath found!")

	    #Getting best path from algorithm's output file
            outputfile = open("/home/pi/Desktop/MDP-Group-20-master/Algorithms/output.txt","r")
            bestpath = outputfile.readlines()
            outputfile.close()
            bestpath = bestpath[0]

	    #Setting Robot's initial position
            xpos = 1
            ypos = 1
            rDir = "N"
            trace = 0
            command = len(bestpath)
            countforshow = 0

	    #Feeding the best path individually to the STM controller
            for movement in bestpath:
		#Check if current command from algorithm's best path is "scan"
                if movement != "s" and not(movement.isdigit()) and movement.isalnum():
                    #Used to check if robot has completed movement
		    RobotPort2=''

		    #Write command to STM controller
                    port.write(bytes(str(movement),'utf-8'))

		    #Printing for Debugging purpose	
                    print("Written: " + str(movement))

		    #Wait until robot finishes their current movement before sending next command
                    while RobotPort2 != bytes(str(movement),'utf-8'):
                        RobotPort2 = port.read(1)
                 
		    #Convert Bestpath into correct command for the realtime movement in android application
                    if movement == "r":   
                        if rDir == "N":
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+"E"),'utf-8'))
                            rDir = "E"
                        elif rDir == "E":
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+"S"),'utf-8'))
                            rDir = "S"
                        elif rDir == "S":
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+"W"),'utf-8'))
                            rDir = "W"
                        elif rDir == "W":
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+"N"),'utf-8'))
                            rDir = "N"
                    if movement == "l":
                        if rDir == "N":
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+"W"),'utf-8'))
                            rDir = "W"
                        elif rDir == "E":
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+"N"),'utf-8'))
                            rDir = "N"
                        elif rDir == "S":
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+"E"),'utf-8'))
                            rDir = "E"
                        elif rDir == "W":
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+"S"),'utf-8'))
                            rDir = "S"
                    if movement == "f":
                        if rDir == "N":
                            ypos+=1
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+str(rDir)),'utf-8'))
                        elif rDir == "E":
                            xpos+=1
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+str(rDir)),'utf-8'))
                        elif rDir == "S":
                            ypos-=1
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+str(rDir)),'utf-8'))
                        elif rDir == "W":
                            xpos-=1
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+str(rDir)),'utf-8'))
                    if movement == "b":
                        if rDir == "N":
                            ypos-=1
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+str(rDir)),'utf-8'))
                        elif rDir == "E":
                            xpos-=1
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+str(rDir)),'utf-8'))
                        elif rDir == "S":
                            ypos+=1
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+str(rDir)),'utf-8'))
                        elif rDir == "W":
                            xpos+=1
                            Android.write(bytes(str("ROBOT,"+str(xpos)+","+str(ypos)+","+str(rDir)),'utf-8')) 
                else:
		    #If bestpath command is "s", skip to next command to get current Object ID
                    if movement.isdigit():
			#Execute image regconition after obtaining Object ID
                        templabel = main()
                        label = main()
			ObID = movement

			#For Testing purpose without image regconition
                        '''sleep(3)
                        label = "20"'''              
                              
			#Write to android application to change Object ID into the Image ID from image regconiton
                        Android.write(bytes(str("TARGET,"+str(ObID)+","+str(label)),'utf-8'))

	#Print for debugging purpose
        print("End of Path")

	#For fastest car challenge, Send STM32 commands to start their movement after buttonis pressed on android
        if "beginFastest" in AndroidMsg:
            print("Sending q")
            port.write(bytes("q",'utf-8'))
            print("Sent q")
	#Alternative button to run a different movement for fastest car challenge
        if "SS|" in AndroidMsg:
            print("Sending Q")
            port.write(bytes("Q",'utf-8'))
            print("Sent Q")
        
        
